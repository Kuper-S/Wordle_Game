*)edit .env
*)edit the unecessary files.



BUG TO FIX:
1) When the user guess the correct word in his last chanse, we got error :
ERROR
Cannot read properties of undefined (reading 'join')
TypeError: Cannot read properties of undefined (reading 'join')
    at handleNextWord (http://localhost:3000/main.7cd743e65bbda32446ce.hot-update.js:217:52)


2) Top player line is not dispaling the correct order of the players
BBB - Gueesed: 3 Words
BEGIN - Gueesed: 4 Words
FIRE - Gueesed: 3 Words
4>3



prev code:

// import React, { useEffect, useState } from "react";
// import { useNavigate } from 'react-router-dom';
// import { ToastContainer, toast } from "react-toastify";
// import Button from "react-bootstrap/Button";
// import Board from "./Board";
// import Confetti from 'react-confetti';
// import GameOver from "./GameOver";
// import Keyboard from "./Keyboard";
// import { boardDefault, generateWordSet } from "./Words";
// import { useAuth } from "../../context/AuthContext";
// import useUserData from "../../Hooks/useUserData";
// import Example from "../../components/Modals/PopUpModal";
// import { GameProvider, useGame } from "../../Hooks/useGameState";
// import { useGameLogic } from "../../components/gameLogic/GameLogic";

// export const GameContext = React.createContext();
// const confettiConfig = {
//   angle: 90,
//   spread: 360,
//   startVelocity: 60,
//   elementCount: 200,
//   dragFriction: 0.1,
//   duration: 3000,
//   stagger: 4,
//   width: "10px",
//   height: "10px",
//   colors: ["#FF0000", "#00FF00", "#0000FF"],
// };
// const MemoizedBoard = React.memo(Board);
// const MemoizedKeyboard = React.memo(Keyboard);

// function GamePage() {
//   const navigate = useNavigate();
//   const { gameState,setGameState , setGameStateProperty, resetGame,setCorrectWord  } = useGame();
//   const { onEnter,
//      handleRestartGame ,
//       onDelete ,
//       onSelectLetter ,
//       handleCancelEndGame ,
//       handleConfirmEndGame,
//       handleEndGameButton,
//       handleNextWord,
//       handleScoreBoardButton,  
//     } = useGameLogic(setGameState); 
//   const { userData, loading } = useUserData();
//   const { currentUser, updateUserData } = useAuth();
//   const [showModal, setShowModal] = useState(false);
//   const [loadingScoreboard, setLoadingScoreboard] = useState(false);
//   const [showConfetti, setShowConfetti] = useState(false);
  
//   const {
//     board,
//     currAttempt,
//     correctWord,
//     disabledLetters,
//     setDisabledLetters,
//     gameOver,
//     numAttempts,
//     gameFinished,
//     wordList,
//     wordIndex,
//     numWordsGuessed,
//     totalAttempts,
//   } = gameState;

 
//   useEffect(() => {
//     if (loading || !currentUser) {
//       return;
//     }

//     const fetchData = async () => {
//       setLoadingScoreboard(true);
//       resetGame(); // Reset the game state to its initial values
//       try {
//         const words = await generateWordSet();
//         setGameStateProperty("wordSet", words.wordSet);
//         setGameStateProperty("correctWord", words.todaysWord);
//         setCorrectWord();
//         console.log('gamestate', gameState);
//         // ... other state updates ...
//       } catch (error) {
//         console.error("Failed to generate word set:", error);
//       }

//       setLoadingScoreboard(false);
//     };

//     fetchData();
//   }, []);

//   const updateUserScore = async (newWordsGuessed, newAttempts) => {
//     try {
//       await updateUserData(newWordsGuessed, newAttempts);
      
//     } catch (error) {
//       console.error("Error updating user data:", error);
//       // Handle error state or show an error message to the user
//     }
//   };

//   const handleOnEnter = () => {
//     setShowConfetti(true);
//     onEnter(gameState, correctWord, setGameStateProperty, toast, updateUserScore(), true);
//   };

//   const handleNextWordButtonLogic = async () => {
//     await handleNextWord(gameState, generateWordSet, setGameStateProperty, setShowConfetti);
//   };

//   const handleScoreBoardButtonLogic = async () => {
//     handleScoreBoardButton(
//       gameState,
//       userData,
//       setShowConfetti,
//       setGameStateProperty,
//       setLoadingScoreboard,
//       navigate
//     );
//   };

//   const handleRestartGameLogic = async () => {
//     setCorrectWord();
    
//     setShowConfetti(false);
//     await handleRestartGame(correctWord,gameState,setGameStateProperty);
//   };

//   const handleOnSelectLetterLogic = (key) => {
//     onSelectLetter(gameState, currAttempt, correctWord, setGameStateProperty, setShowConfetti, key);
//   };

//   const handleOnDeleteLogic = () => {
//     onDelete(currAttempt);
//   };

//   const handleEndGameButtonLogic = () => {
//     setShowModal(true);
//     handleEndGameButton(setShowConfetti, setShowModal);
//   };

//   const handleConfirmEndGameLogic = () => {
//     handleConfirmEndGame(setGameStateProperty, setShowModal, navigate);
//     setShowModal(true);
//   };

//   const handleCancelEndGameLogic = () => {
//     setShowModal(true);
//     handleCancelEndGame(setShowModal);
//   };

 
//   return (
//     <div className="gamepage">
//       <div className="game-container">
//         <nav>
//           <h1>{currentUser.displayName}, You can do it!</h1>
//         </nav>

//         <ToastContainer />
    
          
          
            
//           <div className="game">
//             {showConfetti && <Confetti config={confettiConfig} />}
//             <p className="attempts">Number of Attempts: {numAttempts}</p>
//             <p className="attempts">Total Attempts: {totalAttempts}</p>
//             <MemoizedBoard gameFinished={gameFinished} />
//             {gameOver.gameOver ? (
//               <GameOver />
//             ) : (
//               <MemoizedKeyboard onDelete={handleOnDeleteLogic}/>
//             )}
//             {gameFinished && (
//               <div className="game-buttons">
//                 {gameOver.gameOver && gameOver.guessedWord && (
//                   <Button variant="light" onClick={handleNextWordButtonLogic}>
//                     Next Word
//                   </Button>
//                 )}
//                 {gameOver.gameOver && !gameOver.guessedWord && (
//                   <Button variant="info" onClick={handleScoreBoardButtonLogic}>
//                     Scoreboard
//                   </Button>
//                 )}
//               </div>
//             )}
//             <p className="attempts">Number of Words Guessed: {numWordsGuessed}</p>

//             <div className="game-buttons">
//               <Example
//                 show={showModal}
//                 onConfirm={handleConfirmEndGameLogic}
//                 onCancel={handleCancelEndGameLogic}
//               />
//               <Button
//                 variant="warning"
//                 onClick={() => handleEndGameButtonLogic(setShowConfetti, setShowModal)}
//               >
//                 End Game
//               </Button>

//               <Button
//                 variant="danger"
//                 onClick={handleRestartGameLogic}
//               >
//                 Restart Game
//               </Button>
//             </div>
//           </div>
         
       
//       </div>
//     </div>
//   );
// }

// export default GamePage;
